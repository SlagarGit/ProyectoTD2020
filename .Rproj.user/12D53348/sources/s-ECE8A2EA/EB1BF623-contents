---
title: "Práctica 5. Datos Anómalos"
subtitle: "Tratamiento de Datos, Grado en Ciencia de Datos - UV"
author: "Marcelino Martínez Sober, Luis Gómez Chova, Jordi Muñoz Marí, Juan Gómez Sanchis, Stefan Lahud García"
date: "`r Sys.Date()`"
output:
  pdf_document:
    toc: yes
    toc_depth: 3
    number_sections: no
  html_document:
    echo: yes
    number_sections: no
    theme: lumen
    toc: yes
---

```{r setup, cache = F, echo = F, message = F, warning = F, tidy = F}
# CONFIGURACIÓN GENERAL
library(knitr)
options(width = 100)
# Opciones generales chunks
opts_chunk$set(echo = T, message = F, error = F, warning = F,
               comment = NA, fig.align = 'center', dpi = 100, tidy = F,
               cache.path = '.cache/', fig.path = './figure/')
# options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
  if(is.numeric(x)) {
    round(x, getOption('digits'))
  } else {
    paste(as.character(x), collapse = ', ')
  }
})
# knit_hooks$set(plot = knitr:::hook_plot_html)
knitr::opts_chunk$set(fig.width=8, fig.height=4)
```

```{r eval=F, include=F}
# Especificamos las librerías necesarias en esta lista
packages = c("tidyverse", "knitr", "ggplot2", "datasets", "RColorBrewer","nycflights13")
# use this function to check if each package is on the local machine
# if a package is installed, it will be loaded
# if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
  if (!require(x, character.only = TRUE)) {
    install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
    library(x, character.only = TRUE)
  }
})
# verify they are loaded
search()
```

# Introducción y objetivos

El objetivo de esta práctica es comprobar si los conjuntos de datos con los que vamos a trabajar son consistentes y, por tanto, pueden ser empleados para realizar un análisis sin errores.
Las observaciones contenidas en los datos pueden presentar diferentes tipos de inconsistencias, como valores perdidos (missing values), valores especiales y valores anómalos (outliers).

Para evitar estas inconsistencias, estos datos deberán ser eliminados, corregidos o imputados. Siendo las etapas que pueden seguirse para obtener datos consistentes:

  1. Detección de las inconsistencias.
  2. Detectar el campo o campos que la generan y las dependencias entre ellos.
  3. Corrección de errores.

Vamos a trabajar con el conjunto de datos _iris_, que ya conocemos, que contiene datos perdidos, valores especiales y anomalías de carácter numérico respecto a la distribución de los datos (``dirty_iris.csv``).

```{r}
rm(list=ls())
library(tidyr); library(dplyr); library(ggplot2)
library(readr)
dirty_iris <- read_csv("./data/dirty_iris.csv")
```

# Detección de inconsistencias en los datos

Por lo general, no hay un convenio o una representación común para indicar un dato perdido o incluso determinados valores especiales. En los siguientes ejercicios vamos a analizar cómo detectar inconsistencias presentes en los datos.

## Ejercicio 1: Inspección Visual

Inspecciona visualmente los valores del conjunto de datos (`View`) y ordena de mayor a menor y de menor a mayor cada variable para descubrir las diferentes inconsistencias que presenta el conjunto `dirty_iris`. Comenta los valores que te llamen la atención.

```{r}
#View(dirty_iris)

#De menor a mayor
arrange(dirty_iris, Sepal.Length) #Primer valor 0.0
arrange(dirty_iris, Sepal.Width)  #Primer valor negativo y segundo valor 0.0
arrange(dirty_iris, Petal.Length) #Primer valor 0.000
arrange(dirty_iris, Petal.Width)  #PARECE no tener anomalías con valores mínimos (0.1, 0.2)
#De mayor a menor
arrange(dirty_iris, desc(Sepal.Length)) #Primeros valores 73.0 y 49.0 bastantes distantes
arrange(dirty_iris, desc(Sepal.Width))  #Primeros valores 30.0 y 29.0 bastantes distantes
arrange(dirty_iris, desc(Petal.Length)) #Primeros valores 63, 23 y 14 bastantes distantes
arrange(dirty_iris, desc(Petal.Width))  #Primer valor infinito, totalmente anómalo.
```

## Ejercicio 2: Valores especiales

Visualizar los datos puede ser muy revelador, pero en general, especialmente para conjuntos de datos grandes, realizaremos este análisis de forma automática.

Los valores especiales más comunes en R son:

  * NA (_not available_): missing value o dato perdido (`is.na`)
  * NULL (_empty set_): elemento nulo de longitud 0 (`is.null`)
  * NaN (_not a number_): indeterminación con resultado desconocido (`is.nan`)
  * Inf (_infinite_): valor numérico de valor infinito (`is.infinite`)

Nota: A parte de estas funciones, `is.numeric` comprueba si la variable es numérica;  `is.finite` comprueba la existencia de cualquier valor especial en un vector numérico pero devuelve `FALSE` para variables de texto.

Reemplaza, en todas las columnas numéricas del data frame `dirty_iris`, los valores que sean especiales o negativos por `NA`. 
Nota: Puedes reemplazar los valores para cada variable del dataframe usando `mutate` con la función `ifelse`.

```{r}
dirty_iris <- mutate_all(dirty_iris, ~ ifelse((. >= 0         &
                                               !is.null(.)    &
                                               !is.nan(.)     &
                                               !is.infinite(.)),
                                               .  ,  NA))
head(dirty_iris, n = 10)
```

## Ejercicio 3: Valores perdidos y observaciones completas

  * Calcula el número y porcentaje de observaciones completas (muestras sin ningún dato perdido) empleando `complete.cases` (detecta todos los registros sin datos faltantes).
  * Emplea después la función `na.omit` para quedarnos solo con las filas con datos completos en un nuevo data frame `clean_iris`.

```{r}
sum(complete.cases(dirty_iris))
sum(complete.cases(dirty_iris))*100/nrow(dirty_iris)

clean_iris <- na.omit(dirty_iris)
head(clean_iris, n = 10)
```

# Detección de outliers univariante

Un outlier es una observación (o conjunto de observaciones) que no parecen consistentes con el resto de valores de esa variable. Por lo general, esas observaciones divergirán del patrón de comportamiento del resto de datos, es decir, presentarán una desviación respecto de la distribución de los datos.

En esta sección, vamos a centrarnos en métodos de detección univariantes, así que, en los ejercicios, a modo de ejemplo, analizaremos solo la variable `Petal.Length`.

## Ejercicio 4: Estadísticos básicos

La presencia de outliers puede producir una gran influencia en caracterizaciones sencillas de los datos, como la media y la desviación típica.

Empleado la función `summarise_if`, calcula la media, la desviación típica, mediana, la  _median absolute deviation from the median_ (MADM) y el _interquartile range_ (IQR) de las variables numéricas. 
Hazlo para el data frame con observaciones completas `clean_iris` (que no tiene NA pero tiene menos observaciones) y para el data frame con datos faltantes `dirty_iris` (que presenta muchos NA pero tiene todas las observaciones).

  * Ten en cuenta que no se puede realizar un análisis estadístico con datos faltantes, pero en la mayoría de los casos se puede optar por no considerar dichos valores al realizar los cálculos (parámetro `na.rm=TRUE`).
  * Para obtener el valor MADM, escribe una función `madm(x)` que sea robusta a la presencia de valores NA. Recuerda que el MADM se calcula como $1.4826\cdot\textrm{median}(|x - \textrm{median}|)$.
  * Compara los resultados para los dos conjuntos en la variable `Petal.Length`.
  

```{r}
# MADM median absolute deviation from the median
madm <- function(x, na.rm = TRUE)
  { 
    x <- na.omit(x)
    aux <- NULL
    for(i in 1:length(x))
    {
      aux <- append(aux, abs(x[i] - mean(x)))
    }
    return(1.4826*mean(aux))
  }

# Estadísticos de todas las columnas numéricas:
# para el data frame con observaciones completas `clean_iris` 
clean_iris_stats <- summarise_if(clean_iris, is.numeric, funs(mean, sd, median, madm, IQR))
  
# para el data frame con datos faltantes `dirty_iris`
dirty_iris_stats <- summarise_if(dirty_iris, is.numeric, funs(mean(., na.rm = TRUE),
                                                              sd(., na.rm = TRUE),
                                                              median(., na.rm = TRUE),
                                                              madm,
                                                              IQR(., na.rm = TRUE)))

# Comparo stats para Petal.Length
stats <- rbind(select(clean_iris_stats, contains("Petal.Length")),
               select(dirty_iris_stats, contains("Petal.Length")))
stats <- cbind(Type = c("clean", "dirty"), stats)
head(stats)
```


## Ejercicio 5: Métodos de detección de outliers

Escribe una función que detecte los outliers de un vector $x$ para cada uno de los siguientes métodos de detección de outliers univariantes (todas las funciones tienen que ser robustas a la presencia de valores NA).

  * **Regla 3 sigma** `reglasigma(x)`: Considera que los datos siguen una distribución gaussiana. Datos típicos caracterizados por la media y la dispersión por la varianza. Valores por encima de 3 desviaciones típicas se consideran outliers.

  * **Identificador Hampel** `reglahampel(x)`: Utiliza estimadores robustos y no presupone que los datos siguen una distribución gaussiana. Datos típicos caracterizados por la mediana y la dispersión por la _median absolute deviation from the median_ (MADM). Valores por encima de 3 MADM se consideran outliers.

  * **Regla boxplot** `reglaboxplot(x)`: A partir de los datos se calcula su diagrama de caja (boxplot) y se definen como datos típicos superiores hasta el cuartil 75%, $x_s$; datos típicos inferiores hasta el cuartil 25%, $x_i$; y la dispersión se define como el rango intercuartílico ($IQR= x_s-x_i$). Valores por encima de $x_s+1.5\cdot IQR$ o por debajo de $x_i-1.5\cdot IQR$ se consideran outliers. Usa la función `quantile` para calcular los cuartiles.

  * **Percentiles** `reglapercentil(x)`: Cualquier valor que esté fuera del rango del percentil 5% y 95% se puede considerar como atípico. Usa la función `quantile` para calcular los percentiles.

```{r}
# Regla 3 sigma
reglasigma <- function(x)
{
  x <- na.omit(x)
  mean <- mean(x)
  sigma <- sd(x)
  va <- NULL
  for(i in 1:length(x))
  {
    if(x[i] < mean - 3*sigma | x[i] > mean + 3*sigma)
    {
      va <- append(va, x[i])
    }
  }
  return(va)
}
# Identificador Hampel
reglahampel <- function(x)
{
  x <- na.omit(x)
  median <- median(x)
  madm <- madm(x)
  va <- NULL
  for(i in 1:length(x))
  {
    if(x[i] < median - 3*madm | x[i] > median + 3*madm)
    {
      va <- append(va, x[i])
    }
  }
  return(va)
}
# Regla boxplot
reglaboxplot <- function(x)
{
  x <- na.omit(x)
  Q25 <- quantile(x, probs = c(0.25), names = FALSE)
  Q75 <- quantile(x, probs = c(0.75), names = FALSE)
  IQR <- IQR(x)
  va <- NULL
  for(i in 1:length(x))
  {
    if(x[i] < Q25 - 1.5*IQR | x[i] > Q75 + 1.5*IQR)
    {
      va <- append(va, x[i])
    }
  }
  return(va)
}
# Percentiles
reglapercentil <- function(x)
{
  x <- na.omit(x)
  Q05 <- quantile(x, probs = c(0.05), names = FALSE)
  Q95 <- quantile(x, probs = c(0.95), names = FALSE)
  va <- NULL
  for(i in 1:length(x))
  {
    if(x[i] < Q05 | x[i] > Q95)
    {
      va <- append(va, x[i])
    }
  }
  return(va)
}
```

## Ejercicio 6: Detección de outliers

Utiliza la función `mutate_at` para identificar los outliers en la variable `Petal.Length` con todos los métodos de detección de outliers implementados. Genera una columna nueva para cada método. 
Nota: podría extenderse la aplicación a todas las variables numéricas usando `mutate_if`.  

```{r}
Comparison <- dirty_iris %>%
select(Petal.Length) %>%
mutate_at(vars(Petal.Length), funs(reglasigma = ifelse(is.na(.), NA, . %in% reglasigma(.)),
                                 reglahampel = ifelse(is.na(.), NA, . %in% reglahampel(.)),
                               reglaboxplot = ifelse(is.na(.), NA, . %in% reglaboxplot(.)),
                           reglapercentil = ifelse(is.na(.), NA, . %in% reglapercentil(.))))
arrange(Comparison, desc(Petal.Length)) %>%
head()

# Para todas las variables:
# dirty_iris %>%
# mutate_if(is.numeric, funs(reglasigma = ifelse(is.na(.), NA, . %in% reglasigma(.)),
#                          reglahampel = ifelse(is.na(.), NA, . %in% reglahampel(.)),
#                        reglaboxplot = ifelse(is.na(.), NA, . %in% reglaboxplot(.)),
#                    reglapercentil = ifelse(is.na(.), NA, . %in% reglapercentil(.))))
```

## Ejercicio 7: Comparativa de los métodos de detección de outliers

En los métodos de detección de outliers analizados, examina los resultados comparando:

  * Número de outliers detectados por método.
  * Los valores etiquetados como outliers (ordenados de menor a mayor).

```{r}
length(reglasigma(dirty_iris$Petal.Length))     #2
length(reglahampel(dirty_iris$Petal.Length))    #3
length(reglaboxplot(dirty_iris$Petal.Length))   #3
length(reglapercentil(dirty_iris$Petal.Length)) #12

sort(reglasigma(dirty_iris$Petal.Length))       #23 63
sort(reglahampel(dirty_iris$Petal.Length))      #14 23 63
sort(reglaboxplot(dirty_iris$Petal.Length))     #14 23 63
sort(reglapercentil(dirty_iris$Petal.Length))   #0.000 0.820  0.925  1.100  1.200  6.600  6.700  6.700  6.900 14.000 23.000 63.000
```

## Ejercicio 8: Representación gráfica

Representa gráficamente los datos de `Petal.Length` (distribución de puntos en el eje $y$) para todas las reglas de detección implementadas (repartidas en el eje $x$) mostrando los valores identificados como típicos y los identificados como outliers en diferente color. Usa la función `gather` para poder agrupar por reglas y colorear los outliers fácilmente.

```{r}
Plot <- gather(Comparison, key = "regla",  value = "outlier", -Petal.Length)
ggplot(Plot, aes(x = regla, y = Petal.Length, colour = outlier)) + geom_point(position = "jitter")
```

# Imputación de datos

Como se ha visto, con _missing data_ nos referimos a una observación (o conjunto de observaciones) cuyo valor no es conocido. 

Vamos a ver a continuación ejemplos de cómo imputar valores realistas a esas observaciones perdidas.

## Ejercicio 9: Imputación de datos perdidos con estadísticos básicos

La opción más sencilla es imputar con un valor estimado de los valores conocidos (por ejemplo, con la media, la mediana, o la moda).

Se puede realizar una imputación generalizada (usando todos los valores de la variable) o una imputación a partir de casos similares (la estimación se realiza teniendo en cuenta otra variable):

  * Imputa los missing data en `Petal.Length` empleando la media. Nota: Puedes reemplazar los valores vacios usando `mutate` con `ifelse` creando una nueva variable `Petal.Length1`.

```{r}
mean = mean(dirty_iris$Petal.Length, na.rm = TRUE)
dirty_iris1 <- mutate(dirty_iris, Petal.Length1 = ifelse(is.na(Petal.Length), 
                                                         mean, Petal.Length))
head(dirty_iris1, n = 20)
```

  * Imputa los missing data en `Petal.Length` empleando en esta ocasión la media para cada tipo de `Species` (puedes usar `group_by`). Nota: En este caso puedes calcular las medias usando `summarise`, asignar las diferentes medias a cada observación usando `join` y reemplazar los valores vacios usando `mutate` con `ifelse` creando una nueva variable `Petal.Length2`.

```{r}
dirty_iris2 <- dirty_iris %>%
group_by(Species) %>%
summarise(mean = mean(Petal.Length, na.rm = TRUE)) %>%
right_join(dirty_iris, by = "Species") %>%
mutate(Petal.Length2 = ifelse(is.na(Petal.Length),
                              mean, Petal.Length))
head(dirty_iris2, n = 20)
```

## Ejercicio 10: Representación gráfica

Vamos a comparar ahora los dos métodos de imputación gráficamente eliminando los outliers para una mejor visualización.

  * Recalcula primero las reglas de identificación de outliers (Ejercicio 6) para la nueva variable `Petal.Length2` eliminando así los valores `NA` que pudiese haber.
  
```{r }
Comparison1 <- dirty_iris1 %>%
select(Petal.Length1) %>%
mutate_at(vars(Petal.Length1), funs(reglasigma = ifelse(is.na(.), NA, . %in% reglasigma(.)),
                                reglahampel = ifelse(is.na(.), NA, . %in% reglahampel(.)),
                              reglaboxplot = ifelse(is.na(.), NA, . %in% reglaboxplot(.)),
                           reglapercentil = ifelse(is.na(.), NA, . %in% reglapercentil(.))))
arrange(Comparison1, desc(Petal.Length1)) %>%
head()

Comparison2 <- dirty_iris2 %>%
select(Petal.Length2) %>%
mutate_at(vars(Petal.Length2), funs(reglasigma = ifelse(is.na(.), NA, . %in% reglasigma(.)),
                                reglahampel = ifelse(is.na(.), NA, . %in% reglahampel(.)),
                              reglaboxplot = ifelse(is.na(.), NA, . %in% reglaboxplot(.)),
                           reglapercentil = ifelse(is.na(.), NA, . %in% reglapercentil(.))))
arrange(Comparison2, desc(Petal.Length2)) %>%
head()
```

  * Representa los dos tipos de imputación empleados en un gráfico de dispersión (`Petal.Length1` vs. `Petal.Length2`) eliminando los outliers identificados con la regla `reglapercentil` y poniendo en diferente color los datos originales y los imputados.

```{r}
a <- select(dirty_iris,  Petal.Length)
b <- select(Comparison1, Petal.Length1)
c <- select(Comparison2, Petal.Length2, reglapercentil)
Plot2 <- cbind(a, b, c)
Plot2 <- filter(Plot2, reglapercentil == FALSE)

ggplot(Plot2, aes(x = Petal.Length1, y = Petal.Length2, colour = is.na(Petal.Length))) +
  geom_point(position = "jitter")
```

# Entrega de ejercicios

Al finalizar la práctica debes completar el cuestionario de aula virtual. Debes subir a aula virtual el fichero RMarkdown compilado en html o pdf con las soluciones a los ejercicios planteados.

